package com.example.myapp.Alarm

import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import com.example.myapp.R
import com.example.myapp.model.AppDatabase
import com.example.myapp.model.RoutineEntity
import com.example.myapp.model.Weekday
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import okhttp3.Call
import okhttp3.Callback
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.Response
import org.json.JSONObject
import java.io.IOException
import java.time.LocalTime
import java.util.Calendar

class AlarmReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val routineId = intent.getIntExtra("ROUTINE_ID", 0)
        if (routineId == 0) return

        CoroutineScope(Dispatchers.IO).launch {
            // AppDatabase.getInstance(context)Î•º ÏÇ¨Ïö©ÌïòÏó¨ DB Ïù∏Ïä§ÌÑ¥Ïä§Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
            val db = AppDatabase.getInstance(context)
            val today = java.time.LocalDate.now()

            // 1. Ïò§Îäò ÎÇ†ÏßúÏùò Î£®Ìã¥ Í∏∞Î°ùÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
            val recordCount = db.routineRecordDao().getRecordCountForToday(routineId, today)

            // 2. Í∏∞Î°ùÏù¥ ÏóÜÏùÑ ÎïåÎßå (0Í∞úÏùº ÎïåÎßå) ÏïåÎ¶ºÏùÑ ÌëúÏãú
            if (recordCount == 0) {
                val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                val routineTitle = intent.getStringExtra("ROUTINE_TITLE") ?: "Î£®Ìã¥ ÏãúÍ∞ÑÏûÖÎãàÎã§!"

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    val channel = NotificationChannel(
                        "routine_alarm_channel",
                        "Î£®Ìã¥ ÏïåÎ¶º",
                        NotificationManager.IMPORTANCE_HIGH
                    ).apply {
                        description = "ÏÑ§Ï†ïÌïú Î£®Ìã¥Ïùò ÏãúÏûëÏùÑ ÏïåÎ¶ΩÎãàÎã§."
                    }
                    notificationManager.createNotificationChannel(channel)
                }

                val builder = NotificationCompat.Builder(context, "routine_alarm_channel")
                    .setSmallIcon(R.drawable.ic_launcher_foreground)
                    .setContentTitle(routineTitle)
                    .setContentText("Ïò§ÎäòÏùò Î£®Ìã¥ÏùÑ Ïã§Ï≤úÌï† ÏãúÍ∞ÑÏù¥ÏóêÏöî! üí™")
                    .setPriority(NotificationCompat.PRIORITY_HIGH)
                    .setAutoCancel(true)

                notificationManager.notify(routineId, builder.build())

                // 3. Í≥µÏú† ÎåÄÏÉÅÏóêÍ≤åÎèÑ ÏïåÎûå Î≥¥ÎÇ¥Í∏∞
                val routine = db.routineDao().getNoLiveRoutineById(routineId)
                if (routine?.isShared == true && routine.sharedWith.isNotEmpty()) {
                    val prefs = context.getSharedPreferences("loginPrefs", Context.MODE_PRIVATE)
                    val fromUserId = prefs.getString("userId", "") ?: ""
                    sendRoutinePerformedNotification(
                        fromUserId,
                        routine.title,
                        routine.sharedWith
                    )
                }
            }

            // 4. Îã§Ïùå ÏïåÎûåÏùÑ Îã§Ïãú ÏÑ§Ï†ïÌï©ÎãàÎã§.
            rescheduleNextAlarm(context, routineId)
        }
    }

    private fun rescheduleNextAlarm(context: Context, routineId: Int) {
        CoroutineScope(Dispatchers.IO).launch {
            val db = AppDatabase.getInstance(context)
            // suspend Ìï®ÏàòÏù∏ getRoutineByIdSuspendÎ•º Ìò∏Ï∂úÌï©ÎãàÎã§.
            val routine = db.routineDao().getRoutineByIdSuspend(routineId)

            if (routine != null && routine.isActive) {
                val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
                val nextAlarmTime = getNextAlarmTime(routine.startTime, routine.repeatOn)

                val intent = Intent(context, AlarmReceiver::class.java).apply {
                    putExtra("ROUTINE_ID", routine.id)
                    putExtra("ROUTINE_TITLE", routine.title)
                }

                val pendingIntent = PendingIntent.getBroadcast(
                    context,
                    routine.id,
                    intent,
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    if (alarmManager.canScheduleExactAlarms()) {
                        alarmManager.setExactAndAllowWhileIdle(
                            AlarmManager.RTC_WAKEUP,
                            nextAlarmTime.timeInMillis,
                            pendingIntent
                        )
                    }
                } else {
                    alarmManager.setExactAndAllowWhileIdle(
                        AlarmManager.RTC_WAKEUP,
                        nextAlarmTime.timeInMillis,
                        pendingIntent
                    )
                }
            }
        }
    }

    // Îã§Ïùå ÏïåÎûå ÏãúÍ∞ÑÏùÑ Í≥ÑÏÇ∞ÌïòÎäî Ìó¨Ìçº Ìï®Ïàò
    private fun getNextAlarmTime(startTime: LocalTime, repeatOn: Set<Weekday>): Calendar {
        val now = Calendar.getInstance()

        // Ïò§ÎäòÎ∂ÄÌÑ∞ 7ÏùºÍ∞Ñ ÌôïÏù∏
        for (i in 0..7) {
            val nextPossibleDay = Calendar.getInstance()
            nextPossibleDay.add(Calendar.DAY_OF_YEAR, i)
            val dayOfWeek = nextPossibleDay.get(Calendar.DAY_OF_WEEK)

            if (repeatOn.any { it.name == intToWeekday(dayOfWeek).name }) {
                val nextAlarmTime = Calendar.getInstance().apply {
                    time = nextPossibleDay.time // Í∏∞Ï§Ä ÎÇ†ÏßúÎ•º iÏùº ÌõÑÎ°ú ÏÑ§Ï†ï
                    set(Calendar.HOUR_OF_DAY, startTime.hour)
                    set(Calendar.MINUTE, startTime.minute)
                    set(Calendar.SECOND, 0)
                    set(Calendar.MILLISECOND, 0)
                }

                // Í≥ÑÏÇ∞Îêú ÏïåÎûå ÏãúÍ∞ÑÏù¥ ÌòÑÏû¨ ÏãúÍ∞ÑÎ≥¥Îã§ ÎØ∏ÎûòÏù∏ Í≤ΩÏö∞ÏóêÎßå Ïú†Ìö®
                if (nextAlarmTime.after(now)) {
                    return nextAlarmTime
                }
            }
        }

        // ÎßåÏïΩ 7Ïùº ÎÇ¥Ïóê Ïú†Ìö®Ìïú Îã§Ïùå ÏïåÎûåÏù¥ ÏóÜÎã§Î©¥, Í∞ÄÏû• Îπ†Î•∏ ÏöîÏùºÏóê Îã§ÏùåÏ£ºÎ°ú ÏÑ§Ï†ï
        val fallbackDay = Calendar.getInstance()
        fallbackDay.add(Calendar.DAY_OF_YEAR, 7)
        return fallbackDay
    }

    // CalendarÏùò ÏöîÏùº(Int)ÏùÑ Weekday EnumÏúºÎ°ú Î≥ÄÌôò
    private fun intToWeekday(dayOfWeek: Int): Weekday {
        return when (dayOfWeek) {
            Calendar.SUNDAY -> Weekday.SUNDAY
            Calendar.MONDAY -> Weekday.MONDAY
            Calendar.TUESDAY -> Weekday.TUESDAY
            Calendar.WEDNESDAY -> Weekday.WEDNESDAY
            Calendar.THURSDAY -> Weekday.THURSDAY
            Calendar.FRIDAY -> Weekday.FRIDAY
            Calendar.SATURDAY -> Weekday.SATURDAY
            else -> throw IllegalArgumentException("Invalid day of week")
        }
    }

    private fun sendRoutinePerformedNotification(
        fromUserId: String,
        routineName: String,
        sharedWith: List<String>
    ) {
        val client = OkHttpClient()

        for (toUserId in sharedWith) {
            val json = JSONObject().apply {
                put("fromUser", fromUserId)
                put("toUser", toUserId)
                put("routineName", routineName)
                put("isPerformed", "false")
            }

            val requestBody = json.toString().toRequestBody("application/json; charset=utf-8".toMediaType())

            val request = Request.Builder()
                .url("https://routine-server-uqzh.onrender.com/notify")
                .post(requestBody)
                .build()

            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException) {
                    Log.e("FCM", "Ï†ÑÏÜ° Ïã§Ìå®: ${e.message}")
                }

                override fun onResponse(call: Call, response: Response) {
                    Log.d("FCM", "Ï†ÑÏÜ° ÏÑ±Í≥µ: ${response.code}")
                }
            })
        }
    }
}